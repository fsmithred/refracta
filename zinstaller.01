#!/usr/bin/env bash
# zinstaller-test8
# Copyright 2011 fsmithred@gmail.com
# License: GPL-3
# This is free software with NO WARRANTY. Use at your own risk!
#

# DESCRIPTION
# This script is used for installing a live system to a hard drive. User
# input is via popup windows created by zenity. It should be run from
# a terminal; if it's started from a menu item or a panel launcher, it
# should be run in a persistent terminal, so that progress messages can
# be seen.
#
# SYNOPSIS
# Create rsync excludes file
# Partition hard drive
# Select drive for GRUB bootloader (mbr only at this time)
# Select partition and filesystem type for operating system and
# optional /home partition
# Cleanup (in case of previous aborted run)
# Mount partition(s) and create filesystem(s)
# Copy system with rsync
# Create swapfile
# Copy update-initramfs
# Set up fstab
# Install bootloader
# Cleanup


error_log="z-error_log.txt"
exec 2>"$error_log"

rsync_excludes="/home/user/exclude.list"

# function to exit the script if there are errors
check_exit () {
[[ $? -eq 0 ]] || { echo "
  
  Exit due to error:  $?
  See $error_log for details.
  " ; zenity --error --text="Exit due to error: $?
See $error_log for details." &
  exit 1 ; }
}

# Check that user is root.
[[ $(id -u) -eq 0 ]] || { echo -e "\t You need to be root!\n" ; exit 1 ; }

# Check that rsync excludes file exists, or create one.
if ! [[ -f  $rsync_excludes ]] ; then
zenity --question --ok-label=Continue --cancel-label=Exit \
    --text="There is no rsync excludes file, or its name does not match what this script expects. You should let the script create one, or if you have a custom exlcudes file, and you know what you're doing, you can exit the script and edit the rsync_excludes variable at the top so that it matches the name and path of your custom file."
     if [[ $? = 0 ]] ; then
        rsync_excludes="./exclude.list"
        cat > "$rsync_excludes" <<EOF
- /dev/*
- /cdrom/*
- /media/*
- /target
- /swapfile
- /mnt/*
- /sys/*
- /proc/*
- /tmp/*
- /live
- /boot/grub/grub.cfg
- /boot/grub/menu.lst
- /boot/grub/device.map
- /etc/udev/rules.d/70-persistent-cd.rules
- /etc/udev/rules.d/70-persistent-net.rules
- /etc/fstab
- /etc/mtab
- /home/snapshot/
EOF
    check_exit
    else
        exit 0
    fi
fi 

# Partition a disk
zenity --question --title=Partitioning --ok-label=Yes --cancel-label=No \
    --text="You need to have a partition ready for the installation. If you haven't already done that, you can run the partition editor now.

If you want a separate /home partition, you should create it at this time, this script will ask you later if you've done that.
 
Run GParted Partition Editor now?"
if [[ $? = 0 ]] ; then
    gparted
fi

echo "one"

# Find hard drives, and choose one for grub
choose_grub () {
grub_dev=$(find /dev -mindepth 1 -maxdepth 1  -name "*[sh]d[a-z]"  -printf 'FALSE\0%p\0' |
xargs -0 zenity --list --title=Bootloader --text="Choose a location to install the bootloader." --radiolist --multiple --column ' ' --column 'Hard Drives')

if [[ -z $grub_dev ]] ; then
    zenity --question --title=Error --ok-label="Yes, I'm sure." --cancel-label="Go back" \
  --text="No bootloader will be installed. Are you sure you want this?"
        if [[ $? != 0 ]] ; then
            choose_grub
        fi
elif ! [[ -b $grub_dev ]] ; then
    zenity --question --title=Error  --ok-label=Exit --cancel-label="Go back" \
  --text="Something is wrong. Maybe you checked more than one box. You said you want to install the bootloader in $grub_dev"
        if [[ $? = 0 ]] ; then
            exit 1
        else
            choose_grub
        fi
fi
}

choose_grub


# Show the partition list in a menu, and choose one for /boot
choose_boot () {
boot_dev=$(find /dev -mindepth 1 -maxdepth 1  -name "*[sh]d[a-z][0-9]"  -printf 'FALSE\0%p\0' | \
xargs -0 zenity --list --title="/boot partition" --text="If you would like a separate /boot partition, select 
one now and click \"OK\". Otherwise, just click \"OK\" 
If you're planning to encrypt the operating system, 
you will need a separate /boot partition." \
--radiolist --multiple --column ' ' --column 'Partitions')
if [[ -n $boot_dev ]] ; then
    if ! [[ -b $boot_dev ]] ; then
        zenity --question --title=Error  --ok-label="Go back" --cancel-label=Exit \
        --text="    Something is wrong. Maybe you checked
    more than one box. You said you want to install
    the system to $home_dev"
        if [[ $? = 0 ]] ; then
            choose_boot
        else
            exit 1
        fi
    fi
fi
}

choose_boot

# Choose filesystem type for /boot
choose_fs_boot () {
if [[ -n $boot_dev ]]; then
     fs_type_boot=$(zenity --list --title="/boot filesystem" --text="What type of filesystem would you like on $boot_dev?" \
  --radiolist --column "Choose" --column "Format" \
  FALSE "ext2" \
  FALSE "ext3" \
  FALSE "ext4")
fi

if [[ -z $fs_type_boot ]]; then
    zenity --question --title=Error --ok-label="Go back" --cancel-label=Exit \
      --text="You must choose a file system type for /boot"
    if [[ $? = 0 ]]; then
        choose_fs_boot
    else
        exit 1
    fi
fi
}

if [[ -n $boot_dev ]]; then
    choose_fs_boot
fi


echo "two"
# Show the partition list in a menu, and choose one for the OS
choose_root () {
install_dev=$(find /dev -mindepth 1 -maxdepth 1  -name "*[sh]d[a-z][0-9]"  -printf 'FALSE\0%p\0' | \
xargs -0 zenity --list --title="Root Partition" --text="Choose a partition to use for the installation of the operating system." \
--radiolist --multiple --column ' ' --column 'Partitions')

if [[ -z $install_dev ]] ; then
    zenity --question  --title=Error --ok-label="Go back" --cancel-label="Exit" \
  --text="Nothing was selected. You must select a partition for the installation. What would you like to do?"
        if [[ $? = 0 ]] ; then
            choose_root
        else
            exit 1
        fi
elif ! [[ -b $install_dev ]] ; then
    zenity --question --title=Error --ok-label="Go back" --cancel-label="Exit" \
  --text="    Something is wrong. Maybe you checked
    more than one box. You said you want to install
    the system to $install_dev"
        if [[ $? = 0 ]] ; then
            choose_root
        else
            exit 1
        fi
elif
    [[ $install_dev = $boot_dev ]] ; then
    zenity --info --title=Error --text="You chose the same partition for the operating system as the one for /boot. Try again."
        choose_root
fi
}

choose_root

# Choose filesystem type for OS.
choose_fs_os () {
fs_type_os=$(zenity --list --title="Root Filesystem" --text="What type of filesystem would you like on $install_dev?" \
  --radiolist --column "Choose" --column "Format" \
  FALSE "ext2" \
  FALSE "ext3" \
  FALSE "ext4")
if [[ -z $fs_type_os ]]; then
    zenity --question --ok-label="Go back" --cancel-label=Exit \
      --text="You must choose a file system type
for the operating system"
    if [[ $? = 0 ]]; then
        choose_fs_os
    else
        exit 1
    fi
fi  
}

choose_fs_os

# Encrypt operating system?
zenity --question --title=Encryption --ok-label=Yes --cancel-label=No \
    --text="Do you want to encrypt the operating system?"
if [[ $? = 0 ]] ; then
    encrypt_os="yes"
else
    encrypt_os="no"
fi


# Show the partition list in a menu, and choose one for /home
choose_home () {
home_dev=$(find /dev -mindepth 1 -maxdepth 1  -name "*[sh]d[a-z][0-9]"  -printf 'FALSE\0%p\0' | \
xargs -0 zenity --list --title="/home partition" --text="If you would like a separate /home partition, select 
one now and click \"OK\". Otherwise, just click \"OK\"" \
--radiolist --multiple --column ' ' --column 'Partitions')
if [[ -n $home_dev ]] ; then
    if ! [[ -b $home_dev ]] ; then
        zenity --question  --ok-label="Go back" --cancel-label=Exit \
        --text="    Something is wrong. Maybe you checked
    more than one box. You said you want to install
    the system to $home_dev"
        if [[ $? = 0 ]] ; then
            choose_home
        else
            exit 1
        fi
    elif
        [[ $install_dev = $home_dev ]] ; then
        zenity --info --title=Error --text="You chose the same partition for /home as the one for the operating system. If you don't want a separate /home partition, then click OK without selecting one."
        choose_home
    elif
        [[ $boot_dev = $home_dev ]] ; then
        zenity --info --title=Error --text="You chose the same partition for /home as the one for /boot. Try again."
        choose_home
    fi
fi
}
echo "three"

choose_home

# Choose filesystem type for /home
choose_fs_home () {
if [[ -n $home_dev ]]; then
     fs_type_home=$(zenity --list --title="/home filesystem" --text="What type of filesystem would you like on $home_dev?" \
  --radiolist --column "Choose" --column "Format" \
  FALSE "ext2" \
  FALSE "ext3" \
  FALSE "ext4")
fi

if [[ -z $fs_type_home ]]; then
    zenity --question --title=Error --ok-label="Go back" --cancel-label=Exit \
      --text="You must choose a file system type for /home"
    if [[ $? = 0 ]]; then
        choose_fs_home
    else
        exit 1
    fi
fi
}
if [[ -n $home_dev ]]; then
    choose_fs_home
fi

# Encrypt /home?
if [[ -n $home_dev ]]; then
    zenity --question --title=Encryption --ok-label=Yes --cancel-label=No \
        --text="Do you want /home on an encrypted partition?"
    if [[ $? = 0 ]] ; then
        encrypt_home="yes"
    else
        encrypt_home="no"
    fi
fi

# Show a summary of what will be done
if [[ -z $grub_dev ]] ; then
    grub_dev_message="--> Bootloader will not be installed."
else
    grub_dev_message="--> Bootloader will be installed in $grub_dev"
fi

if [[ $encrypt_os = yes ]] ; then
    os_enc_message=", and will be encrypted."
fi

if [[ -z $home_dev ]] ; then
    home_dev_message="--> /home will not be on a separate partition."
else
    home_dev_message="--> /home will be installed on $home_dev and formatted as $fs_type_home"
fi

if [[ -n $home_dev ]] && [[ $encrypt_home = yes ]] ; then
    home_enc_message=", and will be encrypted."
fi

if [[ -n $boot_dev ]] ; then
    boot_dev_message="--> /boot will be installed on $boot_dev and formatted as $fs_type_boot."
fi

if [[ $encrypt_os = yes ]] || [[ $encrypt_home = yes ]] ; then
    proceed_message="***  IF YOU PROCEED, YOU WILL NEED TO RESPOND TO SOME QUESTIONS IN THE TERMINAL.   Be prepared to create passphrases for any encrypted partitions (several times each.) When you see the progress bar come up, you can take a break."
fi

zenity --question --title=Summary --ok-label="Proceed with the installation." --cancel-label="Exit" \
    --text="Here is a summary of what will be done. This is your last chance to bail out before any changes are made.

$grub_dev_message
--> Operating system will be installed on $install_dev and formatted as $fs_type_os$os_enc_message
$home_dev_message$home_enc_message
$boot_dev_message

$proceed_message"
    if [[ $? != 0 ]] ; then
        exit 0
    fi


# Actual installation begins here

# Unmount or close anything that might need unmounting or closing
cleanup () {
echo -e "\n Cleaning up...\n"
if $(df | grep -q /target/proc/) ; then
    umount /target/proc/
fi

if $(df | grep -q /target/dev/) ; then
    umount /target/dev/
fi

if $(df | grep -q /target/sys/) ; then
    umount /target/sys/
fi

if $(df | grep -q /target) ; then
    umount -l /target/
fi

if $(df | grep -q $install_dev) ; then
    umount $install_dev
fi    

if $(df | grep "\/dev\/mapper\/root-fs") ; then
    umount /dev/mapper/root-fs
fi

if [[ -h /dev/mapper/root-fs ]] ; then
    cryptsetup luksClose /dev/mapper/root-fs
fi

if $(df | grep -q $home_dev) ; then
    umount $home_dev
fi

if $(df | grep -q "\/dev\/mapper\/home-fs") ; then
    umount /dev/mapper/home-fs
fi

if [[ -h /dev/mapper/home-fs ]] ; then
    cryptsetup luksClose home-fs
fi

if $(df | grep -q $boot_dev) ; then
    umount -l $boot_dev
fi
# These next ones might be unnecessary
if [[ -d /target ]] ; then
    rm -rf /target
fi

if [[ -d /target_home ]] ; then
    rm -rf /target_home
fi

if [[ -d /target_boot ]] ; then
    rm -rf /target_boot
fi
}

cleanup

# make mount point, format, adjust reserve and mount
# install_dev must maintain the device name for cryptsetup
# install_part will be either device name or /dev/mapper name as needed.
echo -e "\n Creating filesystem on $install_dev...\n"
mkdir /target ;  check_exit
if [[ $encrypt_os = yes ]] ; then
    echo " You will need to create a passphrase."
    cryptsetup luksFormat "$install_dev" ; check_exit
    echo "Encrypted partition created. Opening it..."
    cryptsetup luksOpen "$install_dev" root-fs ; check_exit
    install_part="/dev/mapper/root-fs"
else
    install_part="$install_dev"
fi 
mke2fs -t $fs_type_os "$install_part" ; check_exit 
tune2fs -r 10000 "$install_part" ; check_exit 
mount "$install_part" /target ; check_exit 

# make mount point for separate home if needed
# and add /home/* to the excludes list if it's not already there
if [[ -n $home_dev ]] ; then
    echo "
    
 Creating filesystem on $home_dev...
    "
    mkdir /target_home ; check_exit
    if [[ $encrypt_home = yes ]]; then
        echo "
 You will need to create a passphrase.
 "
        cryptsetup luksFormat "$home_dev"
        check_exit
        echo "Encrypted partition created. Opening it..."
        cryptsetup luksOpen "$home_dev" home-fs
        check_exit
        home_part="/dev/mapper/home-fs"
    else
        home_part=$home_dev
fi
    mke2fs -t $fs_type_home "$home_part" ; check_exit
    tune2fs -r 10000 "$home_part" ; check_exit
    mount "$home_part" /target_home ; check_exit
    if ! $(grep -q "\/home\/\*" "$rsync_excludes"); then
        echo "- /home/*" >> "$rsync_excludes"
    fi
fi

# make mount point for separate /boot if needed
# and add /boot/* to the excludes list if it's not already there
# allow default for reserved blocks (don't need tune2fs here)
if [[ -n $boot_dev ]] ; then
    mkdir /target_boot ; check_exit
    mke2fs -t $fs_type_boot $boot_dev ; check_exit
    mount $boot_dev /target_boot
    if ! $(grep -q "\/boot\/\*" "$rsync_excludes"); then
        echo "- /boot/*" >> "$rsync_excludes"
    fi
fi


# copy everything over except the things listed in the exclude list
echo -e "\n Copying system to new partition.\n Wait...\n"
rsync -a --progress / /target/ --exclude-from="$rsync_excludes" | \
tee >(zenity --progress --pulsate --auto-close \
 --text="Copying system to new partition.")
check_exit 

# copy separate /home if needed
echo -e "\n Copying home folders to new partition.\n Wait...\n"
if ! [[ -z $home_dev ]] ; then
    rsync -a --progress /home/ /target_home/ --exclude=/home/snapshot | \
    tee >(zenity --progress --pulsate --auto-close \
     --text="Copying home folders to new partition.")
    check_exit
fi

# copy separate /boot if needed
if [[ -n $boot_dev ]] ; then
    echo -e "\n Copying files to boot partitions...\n"
    rsync -a --progress /boot/ /target_boot/ ; check_exit | \
    tee >(zenity --progress --pulsate --auto-close \
     --text="Copying files to boot partition.")
    check_exit
fi


echo "five"

# create swap
echo -e "\n Making a swap file.\n Wait...\n"
dd if=/dev/zero of=/target/swapfile bs=1048 count=256000 | \
tee >(zenity --progress --pulsate --auto-close \
 --text="Making a swap file...")
check_exit 
mkswap /target/swapfile ; check_exit 


# copy the real update-initramfs back in place
echo -e "\n Copying update-initramfs...\n"
if [[ -f /target/usr/sbin/update-initramfs.distrib ]] ; then
    cp /target/usr/sbin/update-initramfs.distrib /target/usr/sbin/update-initramfs
fi
if [[ /target/usr/sbin/update-initramfs.debian ]] ; then
    cp /target/usr/sbin/update-initramfs.debian /target/usr/sbin/update-initramfs
fi

echo "six"

# setup fstab
echo -e "\n Creating /etc/fstab...\n"
echo -e "proc\t\t/proc\tproc\tdefaults\t0\t0
/swapfile\tswap\tswap\tdefaults\t0\t0
$install_part\t/\t$fs_type_os\tdefaults,noatime\t0\t1" >> /target/etc/fstab
check_exit

# add entry for /home to fstab if needed
if ! [[ -z $home_dev ]] ; then
    echo -e "\n Adding /home entry to fstab...\n"
    echo -e "$home_part\t/home\t$fs_type_home\tdefaults,noatime\t0\t2" >> /target/etc/fstab
    check_exit
fi

# add entry for /boot to fstab if needed
if [[ -n $boot_dev ]] ; then
    echo -e "\n Adding /boot entry to fstab...\n"
    echo -e "$boot_dev\t/boot\t$fs_type_boot\tdefaults,noatime,\t0\t1" >> /target/etc/fstab
    check_exit
fi

# Add entry for root filesystem to crypttab if needed
if [[ $encrypt_os = yes ]] ; then
    echo -e "\n Adding $install_part entry to crypttab...\n"
    echo -e "root-fs\t\t$install_dev\t\tnone\t\tluks" >> /target/etc/crypttab
fi

# Add entry for /home to crypttab if needed
if [[ $encrypt_home = yes ]] ; then
    echo -e "\n Adding $home_part entry to crypttab...\n"
    echo -e "home-fs\t\t$home_dev\t\tnone\t\tluks" >> /target/etc/crypttab
fi

echo "eight"
# mount stuff so grub will behave
echo -e "\n Mounting tmpfs and proc...\n"
mount -t tmpfs --bind /dev/ /target/dev/ ; check_exit 
mount -t proc --bind /proc/ /target/proc/ ; check_exit 
mount -t sysfs --bind /sys/ /target/sys/ ; check_exit 


# Setup GRUB 
echo -e "\n Installing the boot loader...\n"

# If /boot is separate partition, need to mount it in chroot for grub
if [[ -n $boot_dev ]] ; then
    chroot /target mount $boot_dev /boot
fi

chroot /target grub-install $grub_dev ; check_exit
echo "nine"
# Run update-initramfs to include dm-mod if using encryption
if [[ $encrypt_os = yes ]] || [[ $encrypt_home = yes ]] ; then
    chroot /target update-initramfs -u
fi

chroot /target update-grub ; check_exit 
echo "@ten@"


# call cleanup function
cleanup


echo -e "\n\t Done!\n\n You may now reboot into the new system.\n\n"
zenity --info --text="Done!\n\n You may now reboot into the new system."

exit 0
