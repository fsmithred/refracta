#!/usr/bin/env bash
# zinstaller-test3
# Copyright 2011 fsmithred@gmail.com
# License: GPL-3
# This is free software with NO WARRANTY. Use at your own risk!
#
# TEST VERSION - it does nothing for real; it just shows you stuff.
# This is written to accomadate up to four hard drives and 15 partitions.
# It will also allow you to try to install to an extended partition. Hm...

error_log="z3error_log.txt"
exec 2>"$error_log"

rsync_excludes="/home/user/exclude.list"

# function to exit the script if there are errors
check_exit () {
[[ $? -eq 0 ]] || { echo "Exit due to error:  $?" ; exit 1 ; }
}

# Check that user is root.
[[ $(id -u) -eq 0 ]] || { echo -e "\t You need to be root!\n" ; exit 1 ; }

:<<HOLD
zenity --question --ok-label=Yes --cancel-label=No \
    --text=" You need to have a partition ready for the installation. If you 
 haven't already done that, you can run the partition editor now.
 If you want a separate /home partition, you should create it at 
 this time, this script will ask you later if you've done that.
 
 Run GParted Partition Editor now?"
if [[ $? = 0 ]] ; then
    gparted
fi
HOLD

# Discover drives, put the list in an array
for i in $(fdisk -l | awk '/Disk\ \/dev\/[sh]d[a-z]/ { print $2 }') ; do
    drive_list[$index]="$i"
    echo "$i"
    ((index++))
done

echo "==="



# Discover partitions, put the list in an array
index=0
for i in $(fdisk -l | awk '/\/dev\/[sh]d[a-z][0-9]/ { print $1 }'); do
    partition_list[$index]="$i"
    echo "$i"
    ((index++))
done

echo "${partition_list[@]}"
echo "---"
echo "${partition_list[*]}"

# YUK! It shows my two drives in the first two entries, but then
# there are extra entries showing up in the menu.
# It might be better to make a text-entry window for grub and
# let the user type it in. That way, if they really want to put it
# in the boot sector of a partition, they can, provided I write a block
# that knows enough to use --force when it's needed.
#
# Show the drive list in a menu, and choose one for GRUB bootloader
grub_dev=$(zenity --list --title="Hard Drives" --text="Choose exactly one drive to use for the GRUB
bootloader. GRUB will be installed into the MBR. If you want to install the bootloader into the boot
sector of a partition, that's too bad, because this program isn't ready for that." \
  --checklist --column "Choose" --column "Drives" --column "Information" --width 550 --height 300\
  FALSE "${drive_list[0]}" "$(fdisk -l | grep "${drive_list[0]}" | awk -F":" '{ print $2 }')" \
  FALSE "${drive_list[1]}" "$(fdisk -l | grep "${drive_list[1]}" | awk -F":" '{ print $2 }')" \
  FALSE "${drive_list[2]}" "$(fdisk -l | grep "${drive_list[2]}" | awk -F":" '{ print $2 }')" \
  FALSE "${drive_list[3]}" "$(fdisk -l | grep "${drive_list[3]}" | awk -F":" '{ print $2 }')")




#  FALSE "${drive_list[0]}" "$(fdisk -l | grep "${drive_list[0]}")" \
#  FALSE "${drive_list[1]}" "$(fdisk -l | grep "${drive_list[1]}")" \
#  FALSE "${drive_list[2]}" "$(fdisk -l | grep "${drive_list[2]}")" \
#  FALSE "${drive_list[3]}" "$(fdisk -l | grep "${drive_list[3]}")") 


#  FALSE "${drive_list[0]}" "$(fdisk -l | awk -v pattern="Disk\ ${drive_list[0]}:" -F":" '$0 ~ pattern { print $0 }')" \
#  FALSE "${drive_list[1]}" "$(fdisk -l | awk -v pattern="Disk\ ${drive_list[1]}:" -F":" '$0 ~ pattern { print $2 }')" \
#  FALSE "${drive_list[2]}" "$(fdisk -l | awk -v pattern="Disk\ ${drive_list[2]}:" -F":" '$0 ~ pattern { print $2 }')" \
#  FALSE "${drive_list[3]}" "$(fdisk -l | awk -v pattern="Disk\ ${drive_list[3]}:" -F":" '$0 ~ pattern { print $2 }')" )



echo "GRUB will be installed in the MBR of $grub_dev"
  
  
  
  

# Show the partition list in a menu, and choose one for the OS
install_dev=$(zenity --list --title="Partition List" --text="Choose exactly one partition to use for the installation of the operating system.
(Note: empty lines contain nothing.)" \
  --checklist --column "Choose" --column "Partition" --column "Information" --width 550 --height 300 \
  FALSE "${partition_list[0]}" "$(fdisk -l | grep "${partition_list[0]}" | awk '{ print $2"  "$3"  "$4"  "$5"  "$6"  "$7 }')" \
  FALSE "${partition_list[1]}" "$(fdisk -l | grep "${partition_list[1]}" | awk '{ print $2"  "$3"  "$4"  "$5"  "$6"  "$7 }')" \
  FALSE "${partition_list[2]}" "$(fdisk -l | grep "${partition_list[2]}" | awk '{ print $2"  "$3"  "$4"  "$5"  "$6"  "$7 }')" \
  FALSE "${partition_list[3]}" "$(fdisk -l | grep "${partition_list[3]}" | awk '{ print $2"  "$3"  "$4"  "$5"  "$6"  "$7 }')" \
  FALSE "${partition_list[4]}" "$(fdisk -l | grep "${partition_list[4]}" | awk '{ print $2"  "$3"  "$4"  "$5"  "$6"  "$7 }')" \
  FALSE "${partition_list[5]}" "$(fdisk -l | grep "${partition_list[5]}" | awk '{ print $2"  "$3"  "$4"  "$5"  "$6"  "$7 }')" \
  FALSE "${partition_list[6]}" "$(fdisk -l | grep "${partition_list[6]}" | awk '{ print $2"  "$3"  "$4"  "$5"  "$6"  "$7 }')" \ 
  FALSE "${partition_list[7]}" "$(fdisk -l | grep "${partition_list[7]}" | awk '{ print $2"  "$3"  "$4"  "$5"  "$6"  "$7 }')" \ 
  FALSE "${partition_list[8]}" "$(fdisk -l | grep "${partition_list[8]}" | awk '{ print $2"  "$3"  "$4"  "$5"  "$6"  "$7 }')" \ 
  FALSE "${partition_list[9]}" "$(fdisk -l | grep "${partition_list[9]}" | awk '{ print $2"  "$3"  "$4"  "$5"  "$6"  "$7 }')" \
  FALSE "${partition_list[11]}" "$(fdisk -l | grep "${partition_list[11]}" | awk '{ print $2"  "$3"  "$4"  "$5"  "$6"  "$7 }')" \ 
  FALSE "${partition_list[12]}" "$(fdisk -l | grep "${partition_list[12]}" | awk '{ print $2"  "$3"  "$4"  "$5"  "$6"  "$7 }')" \ 
  FALSE "${partition_list[13]}" "$(fdisk -l | grep "${partition_list[13]}" | awk '{ print $2"  "$3"  "$4"  "$5"  "$6"  "$7 }')" \ 
  FALSE "${partition_list[14]}" "$(fdisk -l | grep "${partition_list[14]}" | awk '{ print $2"  "$3"  "$4"  "$5"  "$6"  "$7 }')" \ 
  FALSE "${partition_list[15]}" "$(fdisk -l | grep "${partition_list[15]}" | awk '{ print $2"  "$3"  "$4"  "$5"  "$6"  "$7 }')" )

echo "OS will be installed on $install_dev"


# Show the partition list in a menu, and choose one for /home
home_dev=$(zenity --list --title="Partition List" --text="Choose exactly one partition to use for /home
(Note: empty lines contain nothing.)" \
  --checklist --column "Choose" --column "Partition" --column "Information" --width 550 --height 300 \
  FALSE "${partition_list[0]}" "$(fdisk -l | grep "${partition_list[0]}" | awk '{ print $2"  "$3"  "$4"  "$5"  "$6"  "$7 }')" \
  FALSE "${partition_list[1]}" "$(fdisk -l | grep "${partition_list[1]}" | awk '{ print $2"  "$3"  "$4"  "$5"  "$6"  "$7 }')" \
  FALSE "${partition_list[2]}" "$(fdisk -l | grep "${partition_list[2]}" | awk '{ print $2"  "$3"  "$4"  "$5"  "$6"  "$7 }')" \
  FALSE "${partition_list[3]}" "$(fdisk -l | grep "${partition_list[3]}" | awk '{ print $2"  "$3"  "$4"  "$5"  "$6"  "$7 }')" \
  FALSE "${partition_list[4]}" "$(fdisk -l | grep "${partition_list[4]}" | awk '{ print $2"  "$3"  "$4"  "$5"  "$6"  "$7 }')" \
  FALSE "${partition_list[5]}" "$(fdisk -l | grep "${partition_list[5]}" | awk '{ print $2"  "$3"  "$4"  "$5"  "$6"  "$7 }')" \
  FALSE "${partition_list[6]}" "$(fdisk -l | grep "${partition_list[6]}" | awk '{ print $2"  "$3"  "$4"  "$5"  "$6"  "$7 }')" \ 
  FALSE "${partition_list[7]}" "$(fdisk -l | grep "${partition_list[7]}" | awk '{ print $2"  "$3"  "$4"  "$5"  "$6"  "$7 }')" \ 
  FALSE "${partition_list[8]}" "$(fdisk -l | grep "${partition_list[8]}" | awk '{ print $2"  "$3"  "$4"  "$5"  "$6"  "$7 }')" \ 
  FALSE "${partition_list[9]}" "$(fdisk -l | grep "${partition_list[9]}" | awk '{ print $2"  "$3"  "$4"  "$5"  "$6"  "$7 }')" \
  FALSE "${partition_list[11]}" "$(fdisk -l | grep "${partition_list[11]}" | awk '{ print $2"  "$3"  "$4"  "$5"  "$6"  "$7 }')" \ 
  FALSE "${partition_list[12]}" "$(fdisk -l | grep "${partition_list[12]}" | awk '{ print $2"  "$3"  "$4"  "$5"  "$6"  "$7 }')" \ 
  FALSE "${partition_list[13]}" "$(fdisk -l | grep "${partition_list[13]}" | awk '{ print $2"  "$3"  "$4"  "$5"  "$6"  "$7 }')" \ 
  FALSE "${partition_list[14]}" "$(fdisk -l | grep "${partition_list[14]}" | awk '{ print $2"  "$3"  "$4"  "$5"  "$6"  "$7 }')" \ 
  FALSE "${partition_list[15]}" "$(fdisk -l | grep "${partition_list[15]}" | awk '{ print $2"  "$3"  "$4"  "$5"  "$6"  "$7 }')" )

echo "/home will be installed on $home_dev"

if [[ $install_dev = $home_dev ]] ; then
    echo "
    If you want to install /home on the same partition
    as the operating system, you should have said so earlier.
    Exiting...
    "
    exit 1
fi

exit 0
